{"ast":null,"code":"import _asyncToGenerator from \"C:/Users/hp/Desktop/CATCOM2/CATCOM/fullstack/angular/catcom/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n\n  return typeof key === \"symbol\" ? key : String(key);\n}\n\nfunction _toPrimitive(input, hint) {\n  if (typeof input !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (typeof res !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n\n  return (hint === \"string\" ? String : Number)(input);\n}\n/**\n * Contentful Delivery API Client. Contains methods which allow access to the\n * different kinds of entities present in Contentful (Entries, Assets, etc).\n * @namespace ContentfulClientAPI\n * @see Entities\n */\n\n/**\n * The different kinds of top level entities you can find in Contentful\n * @namespace Entities\n */\n\n/**\n * System metadata. See <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/introduction/common-resource-attributes\">Common Resource Attributes</a> for more details.\n * @memberof Entities\n * @typedef Sys\n * @prop {string} type\n * @prop {string} id\n * @prop {Entities.Link} space\n * @prop {string} createdAt\n * @prop {string} updatedAt\n * @prop {number} revision\n */\n\n/**\n * Link to another entity. See <a href=\"https://www.contentful.com/developers/docs/concepts/links/\">Links</a> for more details.\n * @memberof Entities\n * @typedef Link\n * @prop {string} type - type of this entity. Always link.\n * @prop {string} id\n * @prop {string} linkType - type of this link. If defined, either Entry or Asset\n */\n\n/**\n * Link to another entity in a different space.\n * @memberof Entities\n * @typedef ResourceLink\n * @prop {string} type - type of this entity. Always ResourceLink.\n * @prop {string} urn\n * @prop {string} linkType - type of this link. Always Contentful:Entry\n */\n\n/**\n * @memberof ContentfulClientAPI\n * @typedef {Object} ClientAPI\n * @prop {function} getSpace\n * @prop {function} getContentType\n * @prop {function} getTag\n * @prop {function} getTags\n * @prop {function} getContentTypes\n * @prop {function} getEntry\n * @prop {function} getEntries\n * @prop {function} getAsset\n * @prop {function} getAssets\n * @prop {function} createAssetKey\n * @prop {function} parseEntries\n * @prop {function} sync\n */\n\n\nimport { createRequestConfig, errorHandler } from 'contentful-sdk-core';\nimport entities from './entities';\nimport pagedSync from './paged-sync';\nimport normalizeSelect from './utils/normalize-select';\nimport validateTimestamp from './utils/validate-timestamp';\nconst ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\n/**\n * Creates API object with methods to access functionality from Contentful's\n * Delivery API\n * @private\n * @param {Object} params - API initialization params\n * @prop {Object} http - HTTP client instance\n * @prop {Object} entities - Object with wrapper methods for each kind of entity\n * @prop {Function} getGlobalOptions - Link resolver preconfigured with global setting\n * @return {ClientAPI}\n */\n\nexport default function createContentfulApi(_ref) {\n  let {\n    http,\n    getGlobalOptions\n  } = _ref;\n  const {\n    wrapSpace\n  } = entities.space;\n  const {\n    wrapContentType,\n    wrapContentTypeCollection\n  } = entities.contentType;\n  const {\n    wrapEntry,\n    wrapEntryCollection\n  } = entities.entry;\n  const {\n    wrapAsset,\n    wrapAssetCollection\n  } = entities.asset;\n  const {\n    wrapTag,\n    wrapTagCollection\n  } = entities.tag;\n  const {\n    wrapAssetKey\n  } = entities.assetKey;\n  const {\n    wrapLocaleCollection\n  } = entities.locale;\n\n  const notFoundError = id => {\n    const error = new Error('The resource could not be found.');\n    error.sys = {\n      type: 'Error',\n      id: 'NotFound'\n    };\n    error.details = {\n      type: 'Entry',\n      id: id,\n      environment: getGlobalOptions().environment,\n      space: getGlobalOptions().space\n    };\n    return error;\n  };\n  /**\n   * Gets the Space which the client is currently configured to use\n   * @memberof ContentfulClientAPI\n   * @return {Promise<Entities.Space>} Promise for a Space\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   * // returns the space object with the above <space-id>\n   * const space = await client.getSpace()\n   * console.log(space)\n   */\n\n\n  function getSpace() {\n    return _getSpace.apply(this, arguments);\n  }\n  /**\n   * Gets a Content Type\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @return {Promise<Entities.ContentType>} Promise for a Content Type\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const contentType = await client.getContentType('<content_type_id>')\n   * console.log(contentType)\n   */\n\n\n  function _getSpace() {\n    _getSpace = _asyncToGenerator(function* () {\n      switchToSpace(http);\n\n      try {\n        const response = yield http.get('/');\n        return wrapSpace(response.data);\n      } catch (error) {\n        errorHandler(error);\n      }\n    });\n    return _getSpace.apply(this, arguments);\n  }\n\n  function getContentType(_x) {\n    return _getContentType.apply(this, arguments);\n  }\n  /**\n   * Gets a collection of Content Types\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.ContentTypeCollection>} Promise for a collection of Content Types\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getContentTypes()\n   * console.log(response.items)\n   */\n\n\n  function _getContentType() {\n    _getContentType = _asyncToGenerator(function* (id) {\n      switchToEnvironment(http);\n\n      try {\n        const response = yield http.get(`content_types/${id}`);\n        return wrapContentType(response.data);\n      } catch (error) {\n        errorHandler(error);\n      }\n    });\n    return _getContentType.apply(this, arguments);\n  }\n\n  function getContentTypes() {\n    return _getContentTypes.apply(this, arguments);\n  }\n  /**\n   * Gets an Entry\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entities.Entry>} Promise for an Entry\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const entry = await client.getEntry('<entry_id>')\n   * console.log(entry)\n   */\n\n\n  function _getContentTypes() {\n    _getContentTypes = _asyncToGenerator(function* () {\n      let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      switchToEnvironment(http);\n\n      try {\n        const response = yield http.get('content_types', createRequestConfig({\n          query: query\n        }));\n        return wrapContentTypeCollection(response.data);\n      } catch (error) {\n        errorHandler(error);\n      }\n    });\n    return _getContentTypes.apply(this, arguments);\n  }\n\n  function getEntry(_x2) {\n    return _getEntry.apply(this, arguments);\n  }\n  /**\n   * Gets a collection of Entries\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.EntryCollection>} Promise for a collection of Entries\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getEntries()\n   * console.log(response.items)\n   */\n\n\n  function _getEntry() {\n    _getEntry = _asyncToGenerator(function* (id) {\n      let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n      if (!id) {\n        throw notFoundError(id);\n      }\n\n      try {\n        const response = yield this.getEntries(_objectSpread({\n          'sys.id': id\n        }, query));\n\n        if (response.items.length > 0) {\n          return wrapEntry(response.items[0]);\n        } else {\n          throw notFoundError(id);\n        }\n      } catch (error) {\n        errorHandler(error);\n      }\n    });\n    return _getEntry.apply(this, arguments);\n  }\n\n  function getEntries() {\n    return _getEntries.apply(this, arguments);\n  }\n  /**\n   * Gets an Asset\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entities.Asset>} Promise for an Asset\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const asset = await client.getAsset('<asset_id>')\n   * console.log(asset)\n   */\n\n\n  function _getEntries() {\n    _getEntries = _asyncToGenerator(function* () {\n      let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      switchToEnvironment(http);\n      const {\n        resolveLinks,\n        removeUnresolved\n      } = getGlobalOptions(query);\n      query = normalizeSelect(query);\n\n      try {\n        const response = yield http.get('entries', createRequestConfig({\n          query: query\n        }));\n        return wrapEntryCollection(response.data, {\n          resolveLinks,\n          removeUnresolved\n        });\n      } catch (error) {\n        errorHandler(error);\n      }\n    });\n    return _getEntries.apply(this, arguments);\n  }\n\n  function getAsset(_x3) {\n    return _getAsset.apply(this, arguments);\n  }\n  /**\n   * Gets a collection of Assets\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.AssetCollection>} Promise for a collection of Assets\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getAssets()\n   * console.log(response.items)\n   */\n\n\n  function _getAsset() {\n    _getAsset = _asyncToGenerator(function* (id) {\n      let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      switchToEnvironment(http);\n      query = normalizeSelect(query);\n\n      try {\n        const response = yield http.get(`assets/${id}`, createRequestConfig({\n          query: query\n        }));\n        return wrapAsset(response.data);\n      } catch (error) {\n        errorHandler(error);\n      }\n    });\n    return _getAsset.apply(this, arguments);\n  }\n\n  function getAssets() {\n    return _getAssets.apply(this, arguments);\n  }\n  /**\n   * Gets a Tag\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @return {Promise<Entities.Tag>} Promise for a Tag\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const tag = await client.getTag('<asset_id>')\n   * console.log(tag)\n   */\n\n\n  function _getAssets() {\n    _getAssets = _asyncToGenerator(function* () {\n      let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      switchToEnvironment(http);\n      query = normalizeSelect(query);\n\n      try {\n        const response = yield http.get('assets', createRequestConfig({\n          query: query\n        }));\n        return wrapAssetCollection(response.data);\n      } catch (error) {\n        errorHandler(error);\n      }\n    });\n    return _getAssets.apply(this, arguments);\n  }\n\n  function getTag(_x4) {\n    return _getTag.apply(this, arguments);\n  }\n  /**\n   * Gets a collection of Tags\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters.\n   * @return {Promise<Entities.TagCollection>} Promise for a collection of Tags\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getTags()\n   * console.log(response.items)\n   */\n\n\n  function _getTag() {\n    _getTag = _asyncToGenerator(function* (id) {\n      switchToEnvironment(http);\n\n      try {\n        const response = yield http.get(`tags/${id}`);\n        return wrapTag(response.data);\n      } catch (error) {\n        errorHandler(error);\n      }\n    });\n    return _getTag.apply(this, arguments);\n  }\n\n  function getTags() {\n    return _getTags.apply(this, arguments);\n  }\n  /**\n   * Creates an asset key for signing asset URLs (Embargoed Assets)\n   * @memberof ContentfulClientAPI\n   * @param {number} expiresAt - UNIX timestamp in the future, maximum of 48h from now\n   * @return {Promise<Entities.AssetKey>} Promise for an AssetKey\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const assetKey = await client.getAssetKey(<UNIX timestamp>)\n   * console.log(assetKey)\n   */\n\n\n  function _getTags() {\n    _getTags = _asyncToGenerator(function* () {\n      let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      switchToEnvironment(http);\n      query = normalizeSelect(query);\n\n      try {\n        const response = yield http.get('tags', createRequestConfig({\n          query: query\n        }));\n        return wrapTagCollection(response.data);\n      } catch (error) {\n        errorHandler(error);\n      }\n    });\n    return _getTags.apply(this, arguments);\n  }\n\n  function createAssetKey(_x5) {\n    return _createAssetKey.apply(this, arguments);\n  }\n  /**\n   * Gets a collection of Locale\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.LocaleCollection>} Promise for a collection of Locale\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getLocales()\n   * console.log(response.items)\n   */\n\n\n  function _createAssetKey() {\n    _createAssetKey = _asyncToGenerator(function* (expiresAt) {\n      switchToEnvironment(http);\n\n      try {\n        const now = Math.floor(Date.now() / 1000);\n        const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\n        validateTimestamp('expiresAt', expiresAt, {\n          maximum: currentMaxLifetime,\n          now\n        });\n        const params = {\n          expiresAt\n        };\n        const response = yield http.post('asset_keys', params);\n        return wrapAssetKey(response.data);\n      } catch (error) {\n        errorHandler(error);\n      }\n    });\n    return _createAssetKey.apply(this, arguments);\n  }\n\n  function getLocales() {\n    return _getLocales.apply(this, arguments);\n  }\n  /**\n   * Synchronizes either all the content or only new content since last sync\n   * See <a href=\"https://www.contentful.com/developers/docs/concepts/sync/\">Synchronization</a> for more information.\n   * <strong> Important note: </strong> The the sync api endpoint does not support include or link resolution.\n   * However contentful.js is doing link resolution client side if you only make an initial sync.\n   * For the delta sync (using nextSyncToken) it is not possible since the sdk wont have access to all the data to make such an operation.\n   * @memberof ContentfulClientAPI\n   * @param  {Object} query - Query object for the sync call. One of initial or nextSyncToken always needs to be specified, but not both.\n   * @param  {boolean?} query.initial - Indicates if this is the first sync. Use it if you don't have a sync token.\n   * @param  {string?} query.nextSyncToken - The token you got the last time you used this method. Ensures you only get changed content.\n   * @param  {string=} query.type - Filter by this type (all (default), Entry, Asset, Deletion, DeletedAsset or DeletedEntry)\n   * @param  {string=} query.content_type - Filter by this content type id\n   * @param  {boolean=} query.resolveLinks - When true, links to other Entries or Assets are resolved. Default: true.\n   * @param  {Object} options\n   * @param  {boolean=} [options.paginate = true] - Set to false to disable pagination\n   * @return {Promise<Sync.SyncCollection>} Promise for the collection resulting of a sync operation\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.sync({\n   *   initial: true\n   * })\n   * console.log({\n   *   entries: response.entries,\n   *   assets: response.assets,\n   *   nextSyncToken: response.nextSyncToken\n   * })\n   */\n\n\n  function _getLocales() {\n    _getLocales = _asyncToGenerator(function* () {\n      let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      switchToEnvironment(http);\n\n      try {\n        const response = yield http.get('locales', createRequestConfig({\n          query: query\n        }));\n        return wrapLocaleCollection(response.data);\n      } catch (error) {\n        errorHandler(error);\n      }\n    });\n    return _getLocales.apply(this, arguments);\n  }\n\n  function sync() {\n    return _sync.apply(this, arguments);\n  }\n  /**\n  * Parse raw json data into collection of entry objects.Links will be resolved also\n  * @memberof ContentfulClientAPI\n  * @param {Object} raw json data\n  * @example\n  * let data = {items: [\n  *    {\n  *    sys: {type: 'Entry', locale: 'en-US'},\n  *    fields: {\n  *      animal: {sys: {type: 'Link', linkType: 'Animal', id: 'oink'}},\n  *      anotheranimal: {sys: {type: 'Link', linkType: 'Animal', id: 'middle-parrot'}}\n  *    }\n  *  }\n  * ],\n  * includes: {\n  *  Animal: [\n  *    {\n  *      sys: {type: 'Animal', id: 'oink', locale: 'en-US'},\n  *      fields: {\n  *        name: 'Pig',\n  *        friend: {sys: {type: 'Link', linkType: 'Animal', id: 'groundhog'}}\n  *      }\n  *    }\n  *   ]\n  *  }\n  * }\n  * console.log( data.items[0].fields.foo ); // undefined\n  * let parsedData = client.parseEntries(data);\n  * console.log( parsedData.items[0].fields.foo ); // foo\n  */\n\n\n  function _sync() {\n    _sync = _asyncToGenerator(function* () {\n      let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n        paginate: true\n      };\n      const {\n        resolveLinks,\n        removeUnresolved\n      } = getGlobalOptions(query);\n      switchToEnvironment(http);\n      return pagedSync(http, query, _objectSpread({\n        resolveLinks,\n        removeUnresolved\n      }, options));\n    });\n    return _sync.apply(this, arguments);\n  }\n\n  function parseEntries(data) {\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions({});\n    return wrapEntryCollection(data, {\n      resolveLinks,\n      removeUnresolved\n    });\n  }\n  /*\n   * Switches BaseURL to use /environments path\n   * */\n\n\n  function switchToEnvironment(http) {\n    http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\n  }\n  /*\n   * Switches BaseURL to use /spaces path\n   * */\n\n\n  function switchToSpace(http) {\n    http.defaults.baseURL = getGlobalOptions().spaceBaseUrl;\n  }\n\n  return {\n    getSpace,\n    getContentType,\n    getContentTypes,\n    getEntry,\n    getEntries,\n    getAsset,\n    getAssets,\n    getTag,\n    getTags,\n    createAssetKey,\n    getLocales,\n    parseEntries,\n    sync\n  };\n}","map":{"version":3,"names":["ownKeys","object","enumerableOnly","keys","Object","getOwnPropertySymbols","symbols","filter","sym","getOwnPropertyDescriptor","enumerable","push","apply","_objectSpread","target","i","arguments","length","source","forEach","key","_defineProperty","getOwnPropertyDescriptors","defineProperties","defineProperty","obj","value","_toPropertyKey","configurable","writable","arg","_toPrimitive","String","input","hint","prim","Symbol","toPrimitive","undefined","res","call","TypeError","Number","createRequestConfig","errorHandler","entities","pagedSync","normalizeSelect","validateTimestamp","ASSET_KEY_MAX_LIFETIME","createContentfulApi","_ref","http","getGlobalOptions","wrapSpace","space","wrapContentType","wrapContentTypeCollection","contentType","wrapEntry","wrapEntryCollection","entry","wrapAsset","wrapAssetCollection","asset","wrapTag","wrapTagCollection","tag","wrapAssetKey","assetKey","wrapLocaleCollection","locale","notFoundError","id","error","Error","sys","type","details","environment","getSpace","switchToSpace","response","get","data","getContentType","switchToEnvironment","getContentTypes","query","getEntry","getEntries","items","resolveLinks","removeUnresolved","getAsset","getAssets","getTag","getTags","createAssetKey","expiresAt","now","Math","floor","Date","currentMaxLifetime","maximum","params","post","getLocales","sync","options","paginate","parseEntries","defaults","baseURL","environmentBaseUrl","spaceBaseUrl"],"sources":["C:/Users/hp/Desktop/CATCOM2/CATCOM/fullstack/angular/catcom/node_modules/contentful/dist/es-modules/create-contentful-api.js"],"sourcesContent":["function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return typeof key === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (typeof input !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (typeof res !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/**\n * Contentful Delivery API Client. Contains methods which allow access to the\n * different kinds of entities present in Contentful (Entries, Assets, etc).\n * @namespace ContentfulClientAPI\n * @see Entities\n */\n\n/**\n * The different kinds of top level entities you can find in Contentful\n * @namespace Entities\n */\n\n/**\n * System metadata. See <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/introduction/common-resource-attributes\">Common Resource Attributes</a> for more details.\n * @memberof Entities\n * @typedef Sys\n * @prop {string} type\n * @prop {string} id\n * @prop {Entities.Link} space\n * @prop {string} createdAt\n * @prop {string} updatedAt\n * @prop {number} revision\n */\n\n/**\n * Link to another entity. See <a href=\"https://www.contentful.com/developers/docs/concepts/links/\">Links</a> for more details.\n * @memberof Entities\n * @typedef Link\n * @prop {string} type - type of this entity. Always link.\n * @prop {string} id\n * @prop {string} linkType - type of this link. If defined, either Entry or Asset\n */\n\n/**\n * Link to another entity in a different space.\n * @memberof Entities\n * @typedef ResourceLink\n * @prop {string} type - type of this entity. Always ResourceLink.\n * @prop {string} urn\n * @prop {string} linkType - type of this link. Always Contentful:Entry\n */\n\n/**\n * @memberof ContentfulClientAPI\n * @typedef {Object} ClientAPI\n * @prop {function} getSpace\n * @prop {function} getContentType\n * @prop {function} getTag\n * @prop {function} getTags\n * @prop {function} getContentTypes\n * @prop {function} getEntry\n * @prop {function} getEntries\n * @prop {function} getAsset\n * @prop {function} getAssets\n * @prop {function} createAssetKey\n * @prop {function} parseEntries\n * @prop {function} sync\n */\n\nimport { createRequestConfig, errorHandler } from 'contentful-sdk-core';\nimport entities from './entities';\nimport pagedSync from './paged-sync';\nimport normalizeSelect from './utils/normalize-select';\nimport validateTimestamp from './utils/validate-timestamp';\nconst ASSET_KEY_MAX_LIFETIME = 48 * 60 * 60;\n\n/**\n * Creates API object with methods to access functionality from Contentful's\n * Delivery API\n * @private\n * @param {Object} params - API initialization params\n * @prop {Object} http - HTTP client instance\n * @prop {Object} entities - Object with wrapper methods for each kind of entity\n * @prop {Function} getGlobalOptions - Link resolver preconfigured with global setting\n * @return {ClientAPI}\n */\nexport default function createContentfulApi(_ref) {\n  let {\n    http,\n    getGlobalOptions\n  } = _ref;\n  const {\n    wrapSpace\n  } = entities.space;\n  const {\n    wrapContentType,\n    wrapContentTypeCollection\n  } = entities.contentType;\n  const {\n    wrapEntry,\n    wrapEntryCollection\n  } = entities.entry;\n  const {\n    wrapAsset,\n    wrapAssetCollection\n  } = entities.asset;\n  const {\n    wrapTag,\n    wrapTagCollection\n  } = entities.tag;\n  const {\n    wrapAssetKey\n  } = entities.assetKey;\n  const {\n    wrapLocaleCollection\n  } = entities.locale;\n  const notFoundError = id => {\n    const error = new Error('The resource could not be found.');\n    error.sys = {\n      type: 'Error',\n      id: 'NotFound'\n    };\n    error.details = {\n      type: 'Entry',\n      id: id,\n      environment: getGlobalOptions().environment,\n      space: getGlobalOptions().space\n    };\n    return error;\n  };\n\n  /**\n   * Gets the Space which the client is currently configured to use\n   * @memberof ContentfulClientAPI\n   * @return {Promise<Entities.Space>} Promise for a Space\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   * // returns the space object with the above <space-id>\n   * const space = await client.getSpace()\n   * console.log(space)\n   */\n  async function getSpace() {\n    switchToSpace(http);\n    try {\n      const response = await http.get('/');\n      return wrapSpace(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n\n  /**\n   * Gets a Content Type\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @return {Promise<Entities.ContentType>} Promise for a Content Type\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const contentType = await client.getContentType('<content_type_id>')\n   * console.log(contentType)\n   */\n  async function getContentType(id) {\n    switchToEnvironment(http);\n    try {\n      const response = await http.get(`content_types/${id}`);\n      return wrapContentType(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n\n  /**\n   * Gets a collection of Content Types\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.ContentTypeCollection>} Promise for a collection of Content Types\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getContentTypes()\n   * console.log(response.items)\n   */\n  async function getContentTypes() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    try {\n      const response = await http.get('content_types', createRequestConfig({\n        query: query\n      }));\n      return wrapContentTypeCollection(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n\n  /**\n   * Gets an Entry\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entities.Entry>} Promise for an Entry\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const entry = await client.getEntry('<entry_id>')\n   * console.log(entry)\n   */\n  async function getEntry(id) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    if (!id) {\n      throw notFoundError(id);\n    }\n    try {\n      const response = await this.getEntries(_objectSpread({\n        'sys.id': id\n      }, query));\n      if (response.items.length > 0) {\n        return wrapEntry(response.items[0]);\n      } else {\n        throw notFoundError(id);\n      }\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n\n  /**\n   * Gets a collection of Entries\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.EntryCollection>} Promise for a collection of Entries\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getEntries()\n   * console.log(response.items)\n   */\n  async function getEntries() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions(query);\n    query = normalizeSelect(query);\n    try {\n      const response = await http.get('entries', createRequestConfig({\n        query: query\n      }));\n      return wrapEntryCollection(response.data, {\n        resolveLinks,\n        removeUnresolved\n      });\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n  /**\n   * Gets an Asset\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @param  {Object=} query - Object with search parameters. In this method it's only useful for `locale`.\n   * @return {Promise<Entities.Asset>} Promise for an Asset\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const asset = await client.getAsset('<asset_id>')\n   * console.log(asset)\n   */\n  async function getAsset(id) {\n    let query = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    switchToEnvironment(http);\n    query = normalizeSelect(query);\n    try {\n      const response = await http.get(`assets/${id}`, createRequestConfig({\n        query: query\n      }));\n      return wrapAsset(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n\n  /**\n   * Gets a collection of Assets\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.AssetCollection>} Promise for a collection of Assets\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getAssets()\n   * console.log(response.items)\n   */\n  async function getAssets() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    query = normalizeSelect(query);\n    try {\n      const response = await http.get('assets', createRequestConfig({\n        query: query\n      }));\n      return wrapAssetCollection(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n\n  /**\n   * Gets a Tag\n   * @memberof ContentfulClientAPI\n   * @param  {string} id\n   * @return {Promise<Entities.Tag>} Promise for a Tag\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const tag = await client.getTag('<asset_id>')\n   * console.log(tag)\n   */\n  async function getTag(id) {\n    switchToEnvironment(http);\n    try {\n      const response = await http.get(`tags/${id}`);\n      return wrapTag(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n\n  /**\n   * Gets a collection of Tags\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters.\n   * @return {Promise<Entities.TagCollection>} Promise for a collection of Tags\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getTags()\n   * console.log(response.items)\n   */\n  async function getTags() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    query = normalizeSelect(query);\n    try {\n      const response = await http.get('tags', createRequestConfig({\n        query: query\n      }));\n      return wrapTagCollection(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n\n  /**\n   * Creates an asset key for signing asset URLs (Embargoed Assets)\n   * @memberof ContentfulClientAPI\n   * @param {number} expiresAt - UNIX timestamp in the future, maximum of 48h from now\n   * @return {Promise<Entities.AssetKey>} Promise for an AssetKey\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const assetKey = await client.getAssetKey(<UNIX timestamp>)\n   * console.log(assetKey)\n   */\n  async function createAssetKey(expiresAt) {\n    switchToEnvironment(http);\n    try {\n      const now = Math.floor(Date.now() / 1000);\n      const currentMaxLifetime = now + ASSET_KEY_MAX_LIFETIME;\n      validateTimestamp('expiresAt', expiresAt, {\n        maximum: currentMaxLifetime,\n        now\n      });\n      const params = {\n        expiresAt\n      };\n      const response = await http.post('asset_keys', params);\n      return wrapAssetKey(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n\n  /**\n   * Gets a collection of Locale\n   * @memberof ContentfulClientAPI\n   * @param  {Object=} query - Object with search parameters. Check the <a href=\"https://www.contentful.com/developers/docs/javascript/tutorials/using-js-cda-sdk/#retrieving-entries-with-search-parameters\">JS SDK tutorial</a> and the <a href=\"https://www.contentful.com/developers/docs/references/content-delivery-api/#/reference/search-parameters\">REST API reference</a> for more details.\n   * @return {Promise<Entities.LocaleCollection>} Promise for a collection of Locale\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.getLocales()\n   * console.log(response.items)\n   */\n  async function getLocales() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    switchToEnvironment(http);\n    try {\n      const response = await http.get('locales', createRequestConfig({\n        query: query\n      }));\n      return wrapLocaleCollection(response.data);\n    } catch (error) {\n      errorHandler(error);\n    }\n  }\n\n  /**\n   * Synchronizes either all the content or only new content since last sync\n   * See <a href=\"https://www.contentful.com/developers/docs/concepts/sync/\">Synchronization</a> for more information.\n   * <strong> Important note: </strong> The the sync api endpoint does not support include or link resolution.\n   * However contentful.js is doing link resolution client side if you only make an initial sync.\n   * For the delta sync (using nextSyncToken) it is not possible since the sdk wont have access to all the data to make such an operation.\n   * @memberof ContentfulClientAPI\n   * @param  {Object} query - Query object for the sync call. One of initial or nextSyncToken always needs to be specified, but not both.\n   * @param  {boolean?} query.initial - Indicates if this is the first sync. Use it if you don't have a sync token.\n   * @param  {string?} query.nextSyncToken - The token you got the last time you used this method. Ensures you only get changed content.\n   * @param  {string=} query.type - Filter by this type (all (default), Entry, Asset, Deletion, DeletedAsset or DeletedEntry)\n   * @param  {string=} query.content_type - Filter by this content type id\n   * @param  {boolean=} query.resolveLinks - When true, links to other Entries or Assets are resolved. Default: true.\n   * @param  {Object} options\n   * @param  {boolean=} [options.paginate = true] - Set to false to disable pagination\n   * @return {Promise<Sync.SyncCollection>} Promise for the collection resulting of a sync operation\n   * @example\n   * const contentful = require('contentful')\n   *\n   * const client = contentful.createClient({\n   *   space: '<space_id>',\n   *   accessToken: '<content_delivery_api_key>'\n   * })\n   *\n   * const response = await client.sync({\n   *   initial: true\n   * })\n   * console.log({\n   *   entries: response.entries,\n   *   assets: response.assets,\n   *   nextSyncToken: response.nextSyncToken\n   * })\n   */\n  async function sync() {\n    let query = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {\n      paginate: true\n    };\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions(query);\n    switchToEnvironment(http);\n    return pagedSync(http, query, _objectSpread({\n      resolveLinks,\n      removeUnresolved\n    }, options));\n  }\n\n  /**\n  * Parse raw json data into collection of entry objects.Links will be resolved also\n  * @memberof ContentfulClientAPI\n  * @param {Object} raw json data\n  * @example\n  * let data = {items: [\n  *    {\n  *    sys: {type: 'Entry', locale: 'en-US'},\n  *    fields: {\n  *      animal: {sys: {type: 'Link', linkType: 'Animal', id: 'oink'}},\n  *      anotheranimal: {sys: {type: 'Link', linkType: 'Animal', id: 'middle-parrot'}}\n  *    }\n  *  }\n  * ],\n  * includes: {\n  *  Animal: [\n  *    {\n  *      sys: {type: 'Animal', id: 'oink', locale: 'en-US'},\n  *      fields: {\n  *        name: 'Pig',\n  *        friend: {sys: {type: 'Link', linkType: 'Animal', id: 'groundhog'}}\n  *      }\n  *    }\n  *   ]\n  *  }\n  * }\n  * console.log( data.items[0].fields.foo ); // undefined\n  * let parsedData = client.parseEntries(data);\n  * console.log( parsedData.items[0].fields.foo ); // foo\n  */\n  function parseEntries(data) {\n    const {\n      resolveLinks,\n      removeUnresolved\n    } = getGlobalOptions({});\n    return wrapEntryCollection(data, {\n      resolveLinks,\n      removeUnresolved\n    });\n  }\n\n  /*\n   * Switches BaseURL to use /environments path\n   * */\n  function switchToEnvironment(http) {\n    http.defaults.baseURL = getGlobalOptions().environmentBaseUrl;\n  }\n\n  /*\n   * Switches BaseURL to use /spaces path\n   * */\n  function switchToSpace(http) {\n    http.defaults.baseURL = getGlobalOptions().spaceBaseUrl;\n  }\n  return {\n    getSpace,\n    getContentType,\n    getContentTypes,\n    getEntry,\n    getEntries,\n    getAsset,\n    getAssets,\n    getTag,\n    getTags,\n    createAssetKey,\n    getLocales,\n    parseEntries,\n    sync\n  };\n}"],"mappings":"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"},"metadata":{},"sourceType":"module"}